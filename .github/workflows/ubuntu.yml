name: ubuntu-edk2

on: push

jobs:
  linux:
    name: ubuntu-build
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include: [
          { NAME: 'AppPkg',         PACKAGE: 'AppPkg/AppPkg.dsc',                                     TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'AppPkg',         PACKAGE: 'AppPkg/AppPkg.dsc',                                     TARGET: 'DEBUG',   ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'ShellPkg',       PACKAGE: 'ShellPkg/ShellPkg.dsc',                                 TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'FatPkg',         PACKAGE: 'FatPkg/FatPkg.dsc',                                     TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'Ext4Pkg',        PACKAGE: 'Features/Ext4Pkg/Ext4Pkg.dsc',                          TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'AsixPkg',        PACKAGE: 'Drivers/ASIX/Asix.dsc',                                 TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'DisplayLinkPkg', PACKAGE: 'Drivers/DisplayLink/DisplayLinkPkg/DisplayLinkPkg.dsc', TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'OvmfPkg',        PACKAGE: 'OvmfPkg/OvmfPkgX64.dsc',                                TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'ArmVirtPkg',     PACKAGE: 'ArmVirtPkg/ArmVirtQemu.dsc',                            TARGET: 'RELEASE', ARCH: 'AARCH64', TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'UefiPayloadPkg', PACKAGE: 'UefiPayloadPkg/UefiPayloadPkg.dsc',                     TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '-D BOOTLOADER=COREBOOT -D PS2_KEYBOARD_ENABLE=TRUE -D SIO_BUS_ENABLE=TRUE' },
          { NAME: 'UefiPayloadPkg', PACKAGE: 'UefiPayloadPkg/UefiPayloadPkg.dsc',                     TARGET: 'DEBUG',   ARCH: 'X64',     TOOLCHAIN: 'GCC',       ADDITIONAL_DEFINITION: '-D BOOTLOADER=COREBOOT -D PS2_KEYBOARD_ENABLE=TRUE -D SIO_BUS_ENABLE=TRUE' },
        ]
    steps:
      - name: Checkout repositories
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup build environment
        run: |-
          sudo apt-get update
          sudo apt-get install -y nasm acpica-tools build-essential crossbuild-essential-i386 crossbuild-essential-amd64 crossbuild-essential-arm64 uuid-dev python3 python3-distutils python3-pip bc gawk llvm-dev lld clang
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10
          sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 10

      - name: Build BaseTools
        run: |-
          sed -i 's+DEF(GCC_IA32_PREFIX)objcopy+ENV(GCC_IA32_PREFIX)objcopy+g' edk2/BaseTools/Conf/tools_def.template
          sed -i 's+DEF(GCC_X64_PREFIX)objcopy+ENV(GCC_X64_PREFIX)objcopy+g'   edk2/BaseTools/Conf/tools_def.template
          sed -i 's+DEF(GCC_IA32_PREFIX)gcc+ENV(GCC_IA32_PREFIX)gcc+g'         edk2/BaseTools/Conf/tools_def.template
          sed -i 's+DEF(GCC_X64_PREFIX)gcc+ENV(GCC_X64_PREFIX)gcc+g'           edk2/BaseTools/Conf/tools_def.template
          if [ ! -d "edk2/BaseTools/Source/C/bin" ]; then
            make -C edk2/BaseTools
          fi

      - name: Build/Patch GenBin(Use for SctPkg)
        if: ${{ matrix.NAME == 'SctPkg' }}
        run: |-
          cp -R edk2-test/uefi-sct/SctPkg/Tools/Source/GenBin edk2/BaseTools/Source/C/GenBin
          sed -i 's+$(EDK_TOOLS_PATH)/Source/C+..+1' edk2/BaseTools/Source/C/GenBin/GNUmakefile
          pushd $PWD && cd edk2/BaseTools/Source/C/GenBin && make && popd
          cp edk2/BaseTools/BinWrappers/PosixLike/GenCrc32 edk2/BaseTools/BinWrappers/PosixLike/GenBin
          chmod a+x edk2/BaseTools/BinWrappers/PosixLike/GenBin

      - name: Patch for Python mod(Use for AppPkg Uefi Python support)
        if: ${{ matrix.NAME == 'AppPkg' }}
        run: |-
          pushd $PWD && cd edk2-libc/AppPkg/Applications/Python/Python-3.6.8 && python srcprep.py && popd
          sed -i 's+# AppPkg/Applications/Python/Python-3.6.8/Python368.inf+AppPkg/Applications/Python/Python-3.6.8/Python368.inf+1' edk2-libc/AppPkg/AppPkg.dsc

      - name: Customize Patches for ShellPkg
        if: ${{ matrix.NAME == 'ShellPkg' }}
        run: |-
          # Remove 5 seconds delay to shell
          sed -i 's+gEfiShellPkgTokenSpaceGuid.PcdShellDefaultDelay|5|UINT32|0x00000015+gEfiShellPkgTokenSpaceGuid.PcdShellDefaultDelay|0|UINT32|0x00000015+1' edk2/ShellPkg/ShellPkg.dec
          # Remove assert when enable debug mode
          sed -i 's+ASSERT_EFI_ERROR (Status);+// ASSERT_EFI_ERROR (Status);+g' edk2/ShellPkg/DynamicCommand/TftpDynamicCommand/Tftp.c
          # Increase more screen buffers
          sed -i '/\[PcdsFixedAtBuild\]/a gEfiShellPkgTokenSpaceGuid.PcdShellScreenLogCount|10' edk2/ShellPkg/ShellPkg.dsc

      - name: Customize Patches for UefiPayloadPkg
        if: ${{ matrix.NAME == 'UefiPayloadPkg' }}
        run: |-
          # Remove Keyboard self test
          sed -i "1734s/KeyboardWaitForValue/\/\/KeyboardWaitForValue/" edk2/MdeModulePkg/Bus/Isa/Ps2KeyboardDxe/Ps2KbdCtrller.c
          sed -i "1736s/mWaitForValueTimeOut/\/\/mWaitForValueTimeOut/" edk2/MdeModulePkg/Bus/Isa/Ps2KeyboardDxe/Ps2KbdCtrller.c

      - name: Build
        run: |-
          export GCC_IA32_PREFIX=i686-linux-gnu-
          export GCC_X64_PREFIX=x86_64-linux-gnu-
          export GCC_AARCH64_PREFIX=aarch64-linux-gnu-
          export WORKSPACE=${{ github.workspace }}
          ln -s edk2-test/uefi-sct/SctPkg/ SctPkg
          export PACKAGES_PATH=$WORKSPACE/edk2
          export PACKAGES_PATH=$PACKAGES_PATH:$WORKSPACE/edk2-platforms
          export PACKAGES_PATH=$PACKAGES_PATH:$WORKSPACE/edk2-platforms/Platform/Intel
          export PACKAGES_PATH=$PACKAGES_PATH:$WORKSPACE/edk2-platforms/Silicon/Intel
          export PACKAGES_PATH=$PACKAGES_PATH:$WORKSPACE/edk2-platforms/Features/Intel
          export PACKAGES_PATH=$PACKAGES_PATH:$WORKSPACE/edk2-libc
          export PACKAGES_PATH=$PACKAGES_PATH:$WORKSPACE/edk2-test
          export PACKAGES_PATH=$PACKAGES_PATH:$WORKSPACE/SctPkg
          . edk2/edksetup.sh
          build -a ${{ matrix.ARCH }} -t ${{ matrix.TOOLCHAIN }} -p ${{ matrix.PACKAGE }} -b ${{ matrix.TARGET }} ${{ matrix.ADDITIONAL_DEFINITION }}

# Ref to AppPkg/Applications/Python/Python-3.6.8/create_python_pkg.sh
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.NAME == 'AppPkg' }}
        with:
          name: edk2_${{ matrix.NAME }}_${{ matrix.TARGET }}_${{ matrix.TOOLCHAIN }}_${{ matrix.ARCH }}_${{ github.sha }}
          retention-days: 14
          path: |-
            Build/**/*.efi
            Build/**/FV/*.fd
            Build/BUILDLOG*.*
            Build/CI_*.*
            Build/SETUPLOG.*
            Build/UPDATE*.*
            Build/**/AutoGen.*
            edk2-libc/AppPkg/Applications/Python/Python-3.6.8/Lib/
            edk2-libc/StdLib/Efi/StdLib/etc/

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.NAME != 'AppPkg' }}
        with:
          name: edk2_${{ matrix.NAME }}_${{ matrix.TARGET }}_${{ matrix.TOOLCHAIN }}_${{ matrix.ARCH }}_${{ github.sha }}
          retention-days: 14
          path: |-
            Build/**/*.efi
            Build/**/FV/*.fd
            Build/**/*.map
            Build/BUILDLOG*.*
            Build/CI_*.*
            Build/SETUPLOG.*
            Build/UPDATE*.*
            Build/**/AutoGen.*
