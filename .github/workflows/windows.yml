name: windows-edk2

on: push

jobs:
  windows:
    name: windows-build
    runs-on: windows-2025
    strategy:
      fail-fast: false
      matrix:
        include: [
          { NAME: 'AppPkg',         PACKAGE: 'AppPkg/AppPkg.dsc',                                     TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'VS2019',       ADDITIONAL_DEFINITION: '-D BUILD_PYTHON368' },
          { NAME: 'AppPkg',         PACKAGE: 'AppPkg/AppPkg.dsc',                                     TARGET: 'DEBUG',   ARCH: 'X64',     TOOLCHAIN: 'VS2019',       ADDITIONAL_DEFINITION: '-D BUILD_PYTHON368' },
          { NAME: 'ShellPkg',       PACKAGE: 'ShellPkg/ShellPkg.dsc',                                 TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'VS2019',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'ShellPkg',       PACKAGE: 'ShellPkg/ShellPkg.dsc',                                 TARGET: 'DEBUG',   ARCH: 'X64',     TOOLCHAIN: 'CLANGPDB',     ADDITIONAL_DEFINITION: '' },
          { NAME: 'FatPkg',         PACKAGE: 'FatPkg/FatPkg.dsc',                                     TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'VS2019',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'AsixPkg',        PACKAGE: 'Drivers/ASIX/Asix.dsc',                                 TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'VS2019',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'DisplayLinkPkg', PACKAGE: 'Drivers/DisplayLink/DisplayLinkPkg/DisplayLinkPkg.dsc', TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'VS2019',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'OvmfPkg',        PACKAGE: 'OvmfPkg/OvmfPkgX64.dsc',                                TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'VS2019',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'OvmfPkg',        PACKAGE: 'OvmfPkg/OvmfPkgX64.dsc',                                TARGET: 'DEBUG',   ARCH: 'X64',     TOOLCHAIN: 'CLANGPDB',     ADDITIONAL_DEFINITION: '' },
          { NAME: 'UefiSct',        PACKAGE: 'SctPkg/UEFI/UEFI_SCT.dsc',                              TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'VS2019',       ADDITIONAL_DEFINITION: '' },
          { NAME: 'IhvSct',         PACKAGE: 'SctPkg/UEFI/IHV_SCT.dsc',                               TARGET: 'RELEASE', ARCH: 'X64',     TOOLCHAIN: 'VS2019',       ADDITIONAL_DEFINITION: '' },
        ]
    steps:
      - name: Checkout repositories
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup build environment
        shell: cmd
        run: |-
          curl -SL --output ${{ github.workspace }}\nasm-2.16.03-win64.zip https://www.nasm.us/pub/nasm/releasebuilds/2.16.03/win64/nasm-2.16.03-win64.zip
          powershell -Command "expand-archive -Path '${{ github.workspace }}\nasm-2.16.03-win64.zip' -DestinationPath 'c:\'"
          move c:\nasm-2.16.03 c:\nasm
          curl -SL --output ${{ github.workspace }}\iasl-win-20240321.zip https://downloadmirror.intel.com/819464/iasl-win-20240321.zip
          powershell -Command "expand-archive -Path '${{ github.workspace }}\iasl-win-20240321.zip' -DestinationPath 'c:\ASL'"

      - name: Setup VS2019 build environment
        if: ${{ matrix.TOOLCHAIN == 'VS2019' }}
        shell: cmd
        run: |-
          curl -SL --output ${{ github.workspace }}\vs_buildtools.exe https://aka.ms/vs/16/release/vs_buildtools.exe
          ${{ github.workspace }}\vs_buildtools.exe --quiet --wait --norestart --add Microsoft.VisualStudio.Component.VC.CoreBuildTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows11SDK.22000

      - name: Setup CLANG build environment
        if: ${{ matrix.TOOLCHAIN == 'CLANGPDB' }}
        run: |-
          choco install mingw llvm

      - name: Build BaseTools with VS2019
        if: ${{ matrix.TOOLCHAIN != 'CLANGPDB' }}
        shell: cmd
        run: |-
          set WORKSPACE=${{ github.workspace }}
          set PACKAGES_PATH=%WORKSPACE%\edk2
          %WORKSPACE%\edk2\edksetup.bat ForceRebuild

      - name: Build BaseTools with CLANG
        if: ${{ matrix.TOOLCHAIN == 'CLANGPDB' }}
        shell: cmd
        run: |-
          set WORKSPACE=${{ github.workspace }}
          set HOST_ARCH=X64
          set BASETOOLS_MINGW_PATH=c:\ProgramData\mingw64\mingw64\
          set path=%path%;%WORKSPACE%\utilities\sed;
          set EDK_TOOLS_BIN=%WORKSPACE%\edk2\BaseTools\Source\C\bin\
          sed -i "s/register//g" %WORKSPACE%\edk2\BaseTools\Source\C\VfrCompile\Pccts\h\AParser.cpp
          sed -i "s/register//g" %WORKSPACE%\edk2\BaseTools\Source\C\VfrCompile\Pccts\h\DLexer.h
          sed -i "s/$(CC)/gcc/g" %WORKSPACE%\edk2\BaseTools\Source\C\VfrCompile\Pccts\antlr\makefile
          %WORKSPACE%\edk2\edksetup.bat mingw-w64 ForceRebuild

      - name: Build/Patch GenBin(Use for SctPkg)
        shell: cmd
        if: ${{ matrix.NAME == 'UefiSct' || matrix.NAME == 'IhvSct' }}
        run: |-
          set WORKSPACE=${{ github.workspace }}
          set path=%path%;%WORKSPACE%\utilities\sed;
          xcopy /S edk2-test\uefi-sct\SctPkg\Tools\Source\GenBin edk2\BaseTools\Source\C\GenBin\
          sed -i 's+$(EDK_TOOLS_PATH)/Source/C+..+1' edk2/BaseTools/Source/C/GenBin/GNUmakefile
          call %WORKSPACE%\utilities\vsenv.bat x86
          call %WORKSPACE%\edk2\edksetup.bat ${{ matrix.TOOLCHAIN }}
          cd %WORKSPACE%\edk2\BaseTools\Source\C\GenBin
          nmake
          copy %WORKSPACE%\edk2\BaseTools\BinWrappers\WindowsLike\GenFds.bat %WORKSPACE%\edk2\BaseTools\BinWrappers\WindowsLike\GenBin.bat

      - name: Prepare environment for Python EFI
        shell: cmd
        if: ${{ matrix.NAME == 'AppPkg' }}
        run: |-
          set path=%path%;%WORKSPACE%\utilities\sed;
          pushd %CD%
          cd edk2-libc/AppPkg/Applications/Python/Python-3.6.8
          python srcprep.py
          popd
          sed -i "s+Build\\\\+%%WORKSPACE%%\\\\Build\\\\+g" edk2-libc\AppPkg\Applications\Python\Python-3.6.8\create_python_pkg.bat
          cat edk2-libc\AppPkg\Applications\Python\Python-3.6.8\create_python_pkg.bat

      - name: Customize Patches for ShellPkg
        shell: cmd
        if: ${{ matrix.NAME == 'ShellPkg' }}
        run: |-
          set path=%path%;%WORKSPACE%\utilities\sed;
          REM Remove 5 seconds delay to shell
          sed -i "s+gEfiShellPkgTokenSpaceGuid.PcdShellDefaultDelay|5|UINT32|0x00000015+gEfiShellPkgTokenSpaceGuid.PcdShellDefaultDelay|0|UINT32|0x00000015+1" edk2/ShellPkg/ShellPkg.dec
          REM Remove assert when enable debug mode
          sed -i "s+ASSERT_EFI_ERROR (Status);+// ASSERT_EFI_ERROR (Status);+g" edk2/ShellPkg/DynamicCommand/TftpDynamicCommand/Tftp.c
          REM Increase more screen buffers
          sed -i "/\[PcdsFixedAtBuild\]/a gEfiShellPkgTokenSpaceGuid.PcdShellScreenLogCount|10" edk2/ShellPkg/ShellPkg.dsc

      - name: Customize Patches for UefiPayloadPkg
        shell: cmd
        if: ${{ matrix.NAME == 'UefiPayloadPkg' }}
        run: |-
          REM Remove Keyboard self test
          sed -i "1734s/KeyboardWaitForValue/\/\/KeyboardWaitForValue/" edk2/MdeModulePkg/Bus/Isa/Ps2KeyboardDxe/Ps2KbdCtrller.c
          sed -i "1736s/mWaitForValueTimeOut/\/\/mWaitForValueTimeOut/" edk2/MdeModulePkg/Bus/Isa/Ps2KeyboardDxe/Ps2KbdCtrller.c

      - name: Build with VS2019
        if: ${{ matrix.TOOLCHAIN != 'CLANGPDB' }}
        shell: cmd
        run: |-
          set WORKSPACE=${{ github.workspace }}
          cd %WORKSPACE%
          set EDK2_LIBC_PATH=%WORKSPACE%\edk2-libc
          mklink /D SctPkg edk2-test\uefi-sct\SctPkg
          set PACKAGES_PATH=%WORKSPACE%/edk2
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-platforms
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-platforms/Platform/Intel
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-platforms/Silicon/Intel
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-platforms/Features/Intel
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-libc
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-test
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/SctPkg
          call %WORKSPACE%\edk2\edksetup.bat ${{ matrix.TOOLCHAIN }}
          build -a ${{ matrix.ARCH }} -t ${{ matrix.TOOLCHAIN }} -p ${{ matrix.PACKAGE }} -b ${{ matrix.TARGET }} ${{ matrix.ADDITIONAL_DEFINITION }}

      - name: Build with CLANG
        if: ${{ matrix.TOOLCHAIN == 'CLANGPDB' }}
        shell: cmd
        run: |-
          set WORKSPACE=${{ github.workspace }}
          cd %WORKSPACE%
          set EDK2_LIBC_PATH=%WORKSPACE%\edk2-libc
          set EDK_TOOLS_BIN=%WORKSPACE%\BaseTools\Source\C\bin\
          set BASETOOLS_MINGW_PATH=c:\ProgramData\mingw64\mingw64\
          mklink /D SctPkg edk2-test\uefi-sct\SctPkg
          set PACKAGES_PATH=%WORKSPACE%/edk2
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-platforms
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-platforms/Platform/Intel
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-platforms/Silicon/Intel
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-platforms/Features/Intel
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-libc
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/edk2-test
          set PACKAGES_PATH=%PACKAGES_PATH%;%WORKSPACE%/SctPkg
          call %WORKSPACE%\edk2\edksetup.bat Mingw-w64
          build -a ${{ matrix.ARCH }} -t ${{ matrix.TOOLCHAIN }} -p ${{ matrix.PACKAGE }} -b ${{ matrix.TARGET }} ${{ matrix.ADDITIONAL_DEFINITION }}

      - name: Create UefiSct packages
        shell: cmd
        if: ${{ matrix.NAME == 'UefiSct' }}
        run: |-
          set WORKSPACE=${{ github.workspace }}
          cd %WORKSPACE%\Build\UefiSct\${{ matrix.TARGET }}_${{ matrix.TOOLCHAIN }}
          ..\..\..\SctPkg\CommonGenFramework.bat uefi_sct ${{ matrix.ARCH }} Install${{ matrix.ARCH }}.efi

      - name: Create IhvSct packages
        shell: cmd
        if: ${{ matrix.NAME == 'IhvSct' }}
        run: |-
          set WORKSPACE=${{ github.workspace }}
          cd %WORKSPACE%\Build\IhvSct\${{ matrix.TARGET }}_${{ matrix.TOOLCHAIN }}
          ..\..\..\SctPkg\CommonGenFramework.bat ihv_sct ${{ matrix.ARCH }} Install${{ matrix.ARCH }}.efi

      - name: Create Python package
        shell: cmd
        if: ${{ matrix.NAME == 'AppPkg' }}
        run: |-
          set WORKSPACE=${{ github.workspace }}
          set EDK2_LIBC_PATH=%WORKSPACE%\edk2-libc
          %WORKSPACE%\edk2-libc\AppPkg\Applications\Python\Python-3.6.8\create_python_pkg.bat ${{ matrix.TOOLCHAIN }} ${{ matrix.TARGET }} ${{ matrix.ARCH }} ${{ github.workspace }}\Build\Python368

# Ref to AppPkg/Applications/Python/Python-3.6.8/create_python_pkg.sh
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.NAME == 'AppPkg' }}
        with:
          name: edk2_${{ matrix.NAME }}_${{ matrix.TARGET }}_${{ matrix.TOOLCHAIN }}_${{ matrix.ARCH }}_${{ github.sha }}
          retention-days: 14
          path: |-
            Build/**/*.efi
            Build/**/FV/*.fd
            Build/BUILDLOG*.*
            Build/CI_*.*
            Build/SETUPLOG.*
            Build/UPDATE*.*
            Build/**/AutoGen.*
            Build/Python368/**

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.NAME == 'UefiSct' || matrix.NAME == 'IhvSct' }}
        with:
          name: edk2_${{ matrix.NAME }}_${{ matrix.TARGET }}_${{ matrix.TOOLCHAIN }}_${{ matrix.ARCH }}_${{ github.sha }}
          retention-days: 14
          path: |-
            Build/**/*.efi
            Build/**/FV/*.fd
            Build/BUILDLOG*.*
            Build/CI_*.*
            Build/SETUPLOG.*
            Build/UPDATE*.*
            Build/**/AutoGen.*
            Build/**/SctPackageX64/*.*

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.NAME != 'AppPkg' && matrix.NAME != 'UefiSct' && matrix.NAME != 'IhvSct' }}
        with:
          name: edk2_${{ matrix.NAME }}_${{ matrix.TARGET }}_${{ matrix.TOOLCHAIN }}_${{ matrix.ARCH }}_${{ github.sha }}
          retention-days: 14
          path: |-
            Build/**/*.efi
            Build/**/FV/*.fd
            Build/**/*.map
            Build/BUILDLOG*.*
            Build/CI_*.*
            Build/SETUPLOG.*
            Build/UPDATE*.*
            Build/**/AutoGen.*
