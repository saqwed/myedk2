# docker build --no-cache -t ghcr.io/saqwed/edk2_ubuntu_container:202211 . -f Dockerfile-Ubuntu
# DOCKER_BUILDKIT=1 docker build --no-cache -t ghcr.io/saqwed/edk2_ubuntu_container:202211 . -f Dockerfile-Ubuntu
FROM ubuntu:22.04 AS ubuntu_base

# Change default shell to bash to avoid cannot use command source problem
# Ref: https://stackoverflow.com/questions/20635472/using-the-run-instruction-in-a-dockerfile-with-source-does-not-work
RUN ln -snf /bin/bash /bin/sh
SHELL ["/bin/bash", "-c"]

ENV TZ=Asia/Taipei
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN set -ex && apt-get update && \
      apt-get install -y git nasm acpica-tools build-essential locales \
      crossbuild-essential-i386 crossbuild-essential-amd64 qemu-system-x86 \
      crossbuild-essential-arm64 python3 python3-distutils python3-pip \
      uuid-dev bc gawk llvm-dev lld clang wget software-properties-common && \
      add-apt-repository universe && apt-get install -y alien ca-certificates && \
      apt-get autoremove --purge && \
      apt-get -y clean && \
      rm -rf /var/lib/apt/lists/*
RUN set -ex && update-alternatives --install /usr/bin/python python /usr/bin/python3 10 && \
      update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 10
RUN set -ex && wget https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/linux/nasm-2.15.05-0.fc31.x86_64.rpm \
      -O /tmp/nasm-2.15.05-0.fc31.x86_64.rpm && \
      alien /tmp/nasm-2.15.05-0.fc31.x86_64.rpm -i && \
      rm -f /tmp/nasm-2.15.05-0.fc31.x86_64.rpm

# Set the locale
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \
    locale-gen
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

FROM alpine:3.16.3 AS alpine_base
RUN apk add --update git

FROM alpine_base AS tianocore_source_code
# RUN git clone --recurse-submodule https://github.com/tianocore/edk2.git
RUN set -ex && \
      git clone https://github.com/tianocore/edk2.git && \
      cd edk2 && \
      git submodule init && \
      git submodule update BaseTools/Source/C/BrotliCompress/brotli && \
      git submodule update MdeModulePkg/Library/BrotliCustomDecompressLib/brotli
RUN cd edk2 && git checkout edk2-stable202211

FROM ubuntu_base AS tianocore_basetools
COPY --from=tianocore_source_code edk2/ edk2/
WORKDIR /edk2
RUN make -C BaseTools

FROM ubuntu_base AS build
COPY --from=tianocore_basetools edk2/BaseTools/ BaseTools/
# Setup the entry point
# https://github.com/tianocore/containers/blob/main/Ubuntu-20/ubuntu20_dev_entrypoint.sh
COPY ubuntu20_dev_entrypoint.sh /usr/libexec/entrypoint
ENTRYPOINT ["/usr/libexec/entrypoint"]
